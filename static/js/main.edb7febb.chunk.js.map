{"version":3,"sources":["components/Header.js","components/Section.js","images/model-s.jpg","images/mob-model-s.jpg","images/model-3.jpg","images/mob-model-3.jpg","images/model-y.jpg","images/mob-model-y.jpg","images/model-x.jpg","images/mob-model-x.jpg","images/accessories.jpg","images/mob-accessories.jpg","images/solar-panel.jpg","images/mob-solar-panel.jpg","images/solar-roof.jpg","images/mob-solar-roof.jpg","images/down-arrow.svg","components/Home.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Header","Section","title","description","backgroundImg","backgroundImgMob","leftBtnText","rightBtnText","downArrow","Wrap","bgImage","bgImageMob","cascade","ItemText","Title","Buttons","ButtonGroup","LeftButton","RightButton","DownArrow","src","styled","div","props","img","Home","Container","App","className","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edb7febb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            header\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Fade from 'react-reveal/Fade';\r\n\r\nfunction Section({title, description, backgroundImg, backgroundImgMob, leftBtnText, rightBtnText, downArrow}) {\r\n    return (\r\n        <Wrap bgImage={backgroundImg} bgImageMob={backgroundImgMob}>\r\n            <Fade cascade>\r\n                <ItemText>\r\n                    <Title>\r\n                        <h1>{title}</h1>\r\n                    </Title>\r\n                    <p>{description}</p>\r\n                </ItemText>\r\n                <Buttons>\r\n                    <ButtonGroup>\r\n                        <LeftButton>\r\n                            {leftBtnText}\r\n                        </LeftButton>\r\n                        { rightBtnText &&\r\n                            <RightButton>\r\n                                {rightBtnText}\r\n                            </RightButton>\r\n                        }\r\n                    </ButtonGroup>\r\n                    { downArrow && \r\n                        <DownArrow src={downArrow} />\r\n                    }\r\n                </Buttons>\r\n            </Fade>\r\n        </Wrap>\r\n    )\r\n}\r\n\r\nexport default Section\r\n\r\nconst Wrap = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-image: ${props => `url(\"${props.bgImage}\")`};\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between; //vertical\r\n    align-items: center; //horizontal\r\n    @media (max-width: 768px) {\r\n        background-image: ${props => `url(\"${props.bgImageMob}\")`};\r\n    }\r\n`\r\n\r\nconst ItemText = styled.div`\r\n    padding: 15vh;\r\n    text-align: center;\r\n`\r\n\r\nconst Title = styled.div`\r\n    margin-bottom: 10px;\r\n`\r\n\r\nconst ButtonGroup = styled.div`\r\n    display: flex;\r\n    margin-bottom: 13px;\r\n    @media (max-width: 768px) {\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nconst LeftButton = styled.div`\r\n    background-color: rgba(23, 26, 32, 0.8);\r\n    height: 40px;\r\n    width: 256px;\r\n    color: white;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 100px;\r\n    opacity: 0.99;\r\n    text-transform: uppercase;\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    margin: 11px;\r\n`\r\n\r\nconst RightButton = styled(LeftButton)`\r\n    background: white;\r\n    opacity: 0.7;\r\n    color: black;\r\n`\r\n\r\nconst DownArrow = styled.img`\r\n    filter: invert(100%);\r\n    margin-bottom: 15px;\r\n    height: 45px;\r\n    animation: animateDown infinite 2s;\r\n`\r\n\r\nconst Buttons = styled.div`\r\n\r\n`","export default __webpack_public_path__ + \"static/media/model-s.207a4600.jpg\";","export default __webpack_public_path__ + \"static/media/mob-model-s.2c737bcc.jpg\";","export default __webpack_public_path__ + \"static/media/model-3.2c950a2f.jpg\";","export default __webpack_public_path__ + \"static/media/mob-model-3.b283860b.jpg\";","export default __webpack_public_path__ + \"static/media/model-y.3e175b1a.jpg\";","export default __webpack_public_path__ + \"static/media/mob-model-y.8a7f91b2.jpg\";","export default __webpack_public_path__ + \"static/media/model-x.5d074582.jpg\";","export default __webpack_public_path__ + \"static/media/mob-model-x.21cefd82.jpg\";","export default __webpack_public_path__ + \"static/media/accessories.9b254dc5.jpg\";","export default __webpack_public_path__ + \"static/media/mob-accessories.3087d2f3.jpg\";","export default __webpack_public_path__ + \"static/media/solar-panel.28f2e717.jpg\";","export default __webpack_public_path__ + \"static/media/mob-solar-panel.ad584599.jpg\";","export default __webpack_public_path__ + \"static/media/solar-roof.48689016.jpg\";","export default __webpack_public_path__ + \"static/media/mob-solar-roof.23379cdf.jpg\";","export default __webpack_public_path__ + \"static/media/down-arrow.9b52668f.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Section from './Section';\r\nimport * as img from '../images/index';\r\n\r\nfunction Home() {\r\n    return (\r\n        <Container>\r\n            <Section\r\n                title=\"Model S\"\r\n                description=\"Order Online for Touchless Delivery\"\r\n                backgroundImg={img.models}\r\n                backgroundImgMob={img.modelsmob}\r\n                leftBtnText=\"Custom order\"\r\n                rightBtnText=\"Existing inventory\"\r\n                downArrow = {img.downarrow}\r\n            />\r\n            <Section \r\n                title=\"Model Y\"\r\n                description=\"Order Online for Touchless Delivery\"\r\n                backgroundImg={img.modely}\r\n                backgroundImgMob={img.modelymob}\r\n                leftBtnText=\"Custom order\"\r\n                rightBtnText=\"Existing inventory\"\r\n            />\r\n            <Section\r\n                title=\"Model 3\"\r\n                description=\"Order Online for Touchless Delivery\"\r\n                backgroundImg={img.model3}\r\n                backgroundImgMob={img.model3mob}\r\n                leftBtnText=\"Custom order\"\r\n                rightBtnText=\"Existing inventory\"\r\n            />\r\n            <Section \r\n                title=\"Model X\"\r\n                description=\"Order Online for Touchless Delivery\"\r\n                backgroundImg={img.modelx}\r\n                backgroundImgMob={img.modelxmob}\r\n                leftBtnText=\"Custom order\"\r\n                rightBtnText=\"Existing inventory\"\r\n            />\r\n            <Section \r\n                title=\"Solar Panels\"\r\n                description=\"Lowest Cost Solar Panels in America\"\r\n                backgroundImg={img.solarpanel}\r\n                backgroundImgMob={img.solarpanelmob}\r\n                leftBtnText=\"Order now\"\r\n                rightBtnText=\"Learn more\"\r\n            />\r\n            <Section \r\n                title=\"Solar Roof\"\r\n                description=\"Produce Clean Energy From Your Roof\"\r\n                backgroundImg={img.solarroof}\r\n                backgroundImgMob={img.solarroofmob}\r\n                leftBtnText=\"Order now\"\r\n                rightBtnText=\"Learn more\"\r\n            />\r\n            <Section \r\n                title=\"Accessories\"\r\n                description=\"\"\r\n                backgroundImg={img.accessories}\r\n                backgroundImgMob={img.accessoriesmob}\r\n                leftBtnText=\"Shop now\"\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\nconst Container = styled.div`\r\n    height: 100vh;\r\n`","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Home from './components/Home';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      {/* <Header /> */}\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}